print("Hello World!")
print("Hello World!")
# setting a seed to make a random sample reproducible, choose any number you want
set.seed(65)
# with argument name, exact argument order
runif(n = 9, min = 3, max = 6)
set.seed(65)
# without argument name, exact argument order
runif(9, 3, 6)
# with argument name, mixed argument order
runif(min = 3, max = 6, n = 9)
set.seed(65)
# setting a seed to make a random sample reproducible, choose any number you want
set.seed(65)
# with argument name, exact argument order
runif(n = 9, min = 3, max = 6)
set.seed(65)
# without argument name, exact argument order
runif(9, 3, 6)
set.seed(65)
# with argument name, mixed argument order
runif(min = 3, max = 6, n = 9)
set.seed(65)
# without argument name, mixed argument order
runif(3, 6, 9) # this means n=3, max=9
set.seed(65)
# using only the first argument
runif(3)
set.seed(65)
# using arguments 1 and 3
runif(3,,4)
### First Coding Steps
# R as a calculator
4 + 4                        + 5
# Space does not matter
# Operators: + - / * ^
# Using several operators and round brackets
(5-3)^3
# Creating objects
x <- c(4,5,6)
c(4, 5.2, 76) -> y # arrows work both directions
y
x = c(4, 5, 6)
assign("x", c(4.2, 1, 5)) # function assign
# c for concatenate
x = c(4,5,6)
x # display in console
x = c(4,5,6); x # semicolon indicates a new row of code
# See which objects are already created
ls()
objects()
# Removing an object
rm("x")
# Working with vectors
x = c(y, 5, y)
x
# Sum and roots
sum(x)
sqrt(x)
# Values at a given position within the vector
x[1]
newobject <- x < 5; newobject
x # Comparison against original values
## Types of brackets
# () round brackets as the standard
# [] box brackets for index positions
# {} curled brackets for functions and loops
### Functions: seq, paste, rep
?seq # starting with the seq function
seq() # just using the default settings
# simple sequence from 3 to 5
seq(3, 5)
seq(from = 3, to = 5)
# using length
seq(from = 3, length = 3)
# step manipulations
seq(from = 3, length = 3, by = 0.5)
seq(from = 3, by = 0.5, length = 3) # changed order
?paste # next function
paste(1:4)
class(paste(1:4)) # checking the class
paste("xyz", 1:10)
paste("xyz", c(2,5,7,"test", 4.5)) # random vector with numbers and characters
paste("xyz", 1:10, sep = "") # modifying the seperator
?rep # next function
rep(c(3,4,5), 3)
rep(1:10, times = 3)
x = c(1,2,3) # creating x
rep(x, each = 3) # using each
rep(x, each = 3, times = 3) # combining arguments
## Working with index positions
x = 4:20 # our data
which(x == 10) # double equal sign, logical operation
x[3]
### Exercise
# 1 . Create the object "myobject" and assign the values 1:10
# in at least 3 different ways
# 2. Get the sum of your object
# 3. Create the following vector by using the paste function
"R is great 4 and I will love it"
"R is great 7 and I will love it"
"R is great 45 and I will love it"
# 4. vector of 1,2,3 : repeat the vector to get 11 x 1, 10 x 2, and 10 x 3
# 5. What is the value of this vector on position 7
## Solutions
# 1 . Create the object "myobject" and assign the values 1:10
# in at least 3 different ways
myobject <- (1:10)
myobject = (1:10)
(1:10) -> myobject
assign("myobject", 1:10)
# 2. Get the sum of your object
sum (myobject)
# 3. Create the following vector by using the paste function
"R is great 4 and I will love it"
"R is great 7 and I will love it"
"R is great 45 and I will love it"
paste ("R is great", c(4,7,45), "and I will love it")
# 4. vector of 1,2,3 : repeat the vector to get 11 x 1, 10 x 2, and 10 x 3
x = rep(1:3, length = 31); x
# 5. What is the value of this vector on position 7
x[7]
### Functions in R
# Brief description: R functions are OBJECTS
# They do calculations for you
# R function structure: name <- function (argument) {statements}
# The arguments specify the components to be used in the function
myfirstfn <- function(x) {x+x}
myfirstfn(10)
# stepwise working functions
mysecondfn <- function(t,z) {
value = z*3
value = value *t
print(value)}
t= 5
z= 9
mysecondfn(t,z)
## Loops - loops and functions are a crucial part in programming
# FOR loops allow a certain operation to be repeated a fixed nr of times
# This is opposed to the While loop where the rep nr is not prefixed
# The syntax looks like this: for (name in vector) {commands}
for (i in 1:15) {print (i)}
for (z in 1:15) {print (z)}
# variable name does not matter although you will see i quite often
# Can be used for quite complex calculations
# Example calculation of primes with the Eratosthenes method (the oldest known systematic method)
PrimVec = function(n){
# to start from 2
if (n>=2) {
# to further specify the sequence we want to work with
s = seq(2,n)
# p will be the container for our primes,
# numbers will be moved from s to p step by step if they meet the
criteria
p = c()
# we start the loop
for (i in seq(2,n)){
# we use any to check that i (of this loop round) is still in s, multiples of i
will be removed
getwd()
setwd("/Users/randhirprem/Desktop/r-projects-advance")
source("~/.active-rstudio-document", echo=TRUE)
getwd()
plot(x,y, col = "green", pch = 20,
main = "Lengths of\nMajor N. American Rivers",
col.main ="red", xlab = "",
ylab = "length in miles")
#basics
4 + 4 + 5
#basic operators + - * / ^ e.g
(5-3)^3
(7*2)^6
#Creating Objects --- with e.g
x <- c(4,5,6)
typeof(x)
is.vector(x)
is.matrix(x)
is.data.frame(x)
is.array(x)
is.list(x)
c(4,5.2,76) <- y
c(4,5.2,76) -> y
typeof(y)
is.vector(y)
is.matrix(y)
is.data.frame(y)
is.array(y)
is.list(y)
getwwd()
getwd()
getwd()
setwd("/Users/randhirprem/Desktop/r-projects-advance")
getwd()
#-----------Asigning function ---------
assign("z", c(4.2,1,5))
# c(x,y,z) for concatenate
# ls() - see objects already created
ls(x)
# c(x,y,z) for concatenate
# ls() - see objects already created
ls()
object(x)
object()
objects(x)
objects()
# Removing Object
rm(z)
#check--
ls()
objects()
#Exercise, remove x and create a vector new x vector that is (y,5,y)
x <- c(y,5,y)
x
# find the sum and sqrt of x
sum(x)
sqrt(x)
#to find a given position in the vector
x[1]
x[2]
x[1:4]
x[:5]
x(:5)
x(:5)
#to find a given position in the vector
x[1] # 4
min(x)
max(x)
#Logical test are the components of vector x < 5 store it in a new object
newobject <- x < 5 ; newobject
#Basic functions
?seq
seq(3,5)
seq(from = 3, to = 5)
seq(from=3, length=5)
#step manipulation
seq(3,5,0.5)
seq(from=3, length=5, by=0.5)
seq(from=3,by=0.5, length=5)
#Paste
?paste
paste(1:4)
class(paste(1:4))
paste("xyz",1:10)
paste("xyz",c(2,5,7),"test",4.5)
paste("xyz",c(2,5,7,"test",4.5))
paste("xyz", 1:10, sep= "")# modifying space
paste("xyz",1:10)
?repl
?rep
rep(c(3,4,5),3)
rep(1:10, times=3)
rep(1:10,3)
#example create a vector called z with 1,2,3 replicate it 3 times
z -> c(1,2,3)
#example create a vector called z with 1,2,3 replicate it 3 times
z <- c(1,2,3)
z
rep(z, each=3)
rep(z, each=3, times=3)
rep(z,3,3)
# Working with index positions
a <- 4:20
a
#find out which position the value 10 is at
which(a == 10)
x[3]
a[3]
# 1. Create and object "myobject" and assign the values 1:10 in 3 diffrent ways
myobject -> 1:10
# 1. Create and object "myobject" and assign the values 1:10 in 3 diffrent ways
myobject <- 1:10
rm(myobject)
myobject <- c(1,10)
myobject <- c(1:10)
rm(myobject)
myobject <- (1,2,3,4,5,6,7,8,9,10)
myobject <- c(1,2,3,4,5,6,7,8,9,10)
myobject <- c(1:10)
myobject <- c(1,2,3,4,5,6,7,8,9,10)
# 1. Create and object "myobject" and assign the values 1:10 in 3 diffrent ways
myobject <- 1:10
# 2. get the sum of the object
sum(myobject)
myobject <- (1:10)
rm(myobject)
assign("myobject", 1:10)
# 2. get the sum of the object
sum(myobject)
# 3. create the following vector by using the paste function
# " R is great 4 and I will love it"
# " R is great 7 and I will love it"
# " R is great 45 and I will love it"
paste("R is great", c(4,7,45), "and I will love it")
# 4. vector of 1,2,3 : repeat the vector to get 11 x 1, 10 x 2 and 10 x 3
x <- rep(1:3, length 31);x
# 4. vector of 1,2,3 : repeat the vector to get 11 x 1, 10 x 2 and 10 x 3
x <- rep(1:3, length=31);x
# 5. What is the value of this vector in position 7
x[7]
getwd()
setwd("/Users/randhirprem/Desktop/r-projects-advance")
getwd()
#basics
4 + 4 + 5
#basic operators + - * / ^ ----- with e.g
(5-3)^3 # - equals to 8
(7*2)^6 # - euqals to 7529536
#Creating Objects --- with e.g
x <- c(4,5,6) # ---- this is a vector of x
c(4,5.2,76) -> y # this also works please se direction of <-
#Check the types that x fufils basic is double i.e float
#--------------- Check (x) -------
typeof(x)
is.vector(x)
is.matrix(x)
is.data.frame(x)
is.array(x)
is.list(x)
#-------------- Check (y) --------
typeof(y)
is.vector(y)
is.matrix(y)
is.data.frame(y)
is.array(y)
is.list(y)
#-----------Asigning function ---------
assign("z", c(4.2,1,5)) # function assign
# c(x,y,z) for concatenate
# ls() & objects() - see objects already created
ls()
objects()
# Removing Object
rm(z)
#rm("z") - alternative
#- z has been removed
#check--
ls()
objects()
#Exercise, remove x and create a vector new x vector that is (y,5,y)
x <- c(y,5,y)
x
# find the sum and sqrt of x
sum(x)
sqrt(x)
mean(x)
min(x)
max(x)
#to find a given position in the vector
x[1] # 4
x[2] # 5.2
x[1:4] # 4.0  5.2 76.0  5.0
#Logical test are the components of vector x < 5 store it in a new object
newobject <- x < 5 ; newobject
# Type of brackets
# () - standart round bracket
# [] - box for index
# {} - for function
#Basic functions----------
#Sequence
?seq
seq()
# simple sequence from 3 to 5
seq(3,5)
seq(from = 3, to = 5)
seq(from=3, length=3)
#step manipulation
seq(3,5,0.5)
seq(from=3, length=5, by=0.5)
seq(from=3,by=0.5, length=5)
#Paste
?paste
paste(1:4)
class(paste(1:4)) # check class of paste is character
paste("xyz",1:10)
paste("xyz",c(2,5,7,"test",4.5)) # random vector type string
paste("xyz", 1:10, sep= "")# modifying space
#Replicate
?rep
rep(c(3,4,5),3)
rep(1:10, times=3)
rep(1:10,3)
#example create a vector called z with 1,2,3 repeat it 3 times and replicate the entire value by 3 times
z <- c(1,2,3)
z
rep(z, each=3) # using each
rep(z, each=3, times=3) # combining the arguement
# Working with index positions
a <- 4:20
a
#find out which position the value 10 is at
which(a == 10) # returns position 7
a[3] # returns value of postion 3 which is 6
#------------------------------------Test--------------------------------------
# 1. Create and object "myobject" and assign the values 1:10 in 3 diffrent ways
myobject <- 1:10
rm(myobject)
myobject <- (1:10)
rm(myobject)
myobject <- c(1,2,3,4,5,6,7,8,9,10)
rm(myobject)
assign("myobject", 1:10)
# 2. get the sum of the object
sum(myobject)
# 3. create the following vector by using the paste function
# " R is great 4 and I will love it"
# " R is great 7 and I will love it"
# " R is great 45 and I will love it"
paste("R is great", c(4,7,45), "and I will love it")
# 4. vector of 1,2,3 : repeat the vector to get 11 x 1, 10 x 2 and 10 x 3
b <- rep(1:3, length=31);b
# 5. What is the value of this vector in position 7
b[7]
myfirstfn <- function(x) {x+x}
myfirstfn(10)
mysecondfn <- function(t,z) {
value = z*3
value = value *t
print(value)
}
t=5
z=9
mysecondfn(t,z)
#For loop example
for (i in 1:15) {
print(i)
}
PrimVec = function(n){
if(n>=2) {
s =(2,n)
PrimVec = function(n){
if(n >= 2) {
s =(2,n)
#example of a function inside a loop inside an if-else logic
PrimVec = function(n){
if(n >= 2) {
s =(2,n)
#example of a function inside a loop inside an if-else logic
PrimVec = function(n){
if(n >= 2,) {
PrimVec = function(n){
# to start from 2
if (n>=2) {
# to further specify the sequence we want to work with
s = seq(2,n)
# p will be the container for our primes,
# numbers will be moved from s to p step by step if they meet the
criteria
p = c()
# we start the loop
for (i in seq(2,n)){
# we use any to check that i (of this loop round) is still in s, multiples of i
will be removed
PrimVec = function(n){
if(n >= 2) {
s =(2,n)
## working with dataframe
?airmiles
head(airmiles)
tail(airmiles)
summary(airmiles)
?mtcars
summary(mtcars)
plot(mtcars)
hist(mtcars)
hist(airmiles)
head(mtcars)
sum(mtcars$wt)
attach(mtcars)
sum(wt)
detach(mtcars)
mtcars[2,6]
mtcars[c(2,5,8),6]
install.packages("data.table")
library(foreign)
install.packages("SQL")
install.packages("RSQLite")
install.packages("dbplyr")
