fin[!complete.cases(fin),]
#Step 3 Find the NA in industry column with filter
fin[is.na(fin$Industry),]
#step 4 which row is not empty in industry column
fin[!is.na(fin$Industry),]
#step 5 assign it back to fin
fin <- fin[!is.na(fin$Industry),]
#step 6 check not complete cases
fin[!complete.cases(fin),]
rownames(fin) <- 1:nrow(fin)
fin
#Replace missing data: Factual Analysis
fin[!complete.case(fin),]
#Replace missing data: Factual Analysis
fin[!complete.cases(fin),]
fin[is.na(fin$State),]
fin[is.na(fin$State) & fin$City=="New York",]
fin[is.na(fin$State) & fin$City=="New York","State"] <- "NY"
#Check
fin[c(11,377)]
#Check
fin[c(11,377),]
fin[is.na(fin$State) & fin$City=="San Francisco","State"] <- "CA"
fin[c(82,265),]
fin[!complete.cases(fin),]
median(fin[,"Employees"],na.rm = TRUE)
#Check mean
mean(fin[,"Employees"],na.rm = TRUE)
median(fin[fin$Industry == "Retail","Employees"],na.rm = TRUE)
median(fin[fin$Industry == "Retail","Employees"],na.rm = TRUE) # across retail
mean(fin[fin$Industry == "Retail","Employees"],na.rm = TRUE) # across retail
med_retail <- median(fin[fin$Industry == "Retail","Employees"],na.rm = TRUE)
# Filter creation for future input
fin[is.na(fin$Employees) & fin$Industry == "Retail",]
med_empl_retail <- median(fin[fin$Industry == "Retail","Employees"],na.rm = TRUE)
# add the median info to the missing retail employee number
fin[is.na(fin$Employees) & fin$Industry == "Retail","Employees"] <- med_empl_retail
#check:
fin[3,]
#For missing infor in financal services
median(fin[fin$Industry == "Financial Services","Employees"],na.rm = T)
#For missing infor in financal services
med_empl_financial_services <- median(fin[fin$Industry == "Financial Services","Employees"],na.rm = T)
fin[is.na(fin$Employees) & fin$Industry == "Financial Service"]
fin[is.na(fin$Employees) & fin$Industry == "Financial Service","Employees"]
fin[is.na(fin$Employees) & fin$Industry == "Financial Service","Employees"] <- med_empl_financial_services
fin[330]
fin[330,]
fin[is.na(fin$Employees) & fin$Industry == "Financial Services","Employees"] <- med_empl_financial_services
fin[330,]
fin[!complete.cases(fin),]
med_growth_constr <- median(fin[fin$Industry=="Construction","Growth"], na.rm=T)
fin[is.na(fin$Growth)& fin$Industry=="Construction",]
fin[is.na(fin$Growth)& fin$Industry=="Construction","Growth"] <- med_growth_const
fin[is.na(fin$Growth)& fin$Industry=="Construction","Growth"] <- med_growth_constr
fin[8,]
fin[!complete.cases(fin),]
#------------------Mini Exercise -------------------------------------
#revenue
med_rev_constr <- median(fin[fin$Industry=="Construction","Revenue"],na.rm=T)
fin[is.na(fin$Revenue)&fin$Industry=="Construction",]
fin[is.na(fin$Revenue)&fin$Industry=="Construction","Revenue"] <- med_rev_constr
fin[!complete.cases(fin),]
#Expenses
#Careful dont add the expense to the IT industry
med_exp_constr <- median(fin[fin$Industry=="Construction","Expenses"],na.rm=T)
fin[is.na(fin$Expenses)&fin$Industry=="Construction",]
fin[is.na(fin$Expenses)&fin$Industry=="Construction","Expenses"] <- med_exp_constr
fin[!complete.cases(fin),]
fin[is.na(fin$Expenses)&fin$Industry=="Construction",& is.na(fin$Profit),]
fin[is.na(fin$Expenses)&fin$Industry=="Construction"& is.na(fin$Profit),]
fin[!complete.cases(fin),]
#Replace Missing DATA: derived values
#Revenue - Expenses = Profit
#Expenses = Revenue - Profit
fin[is.na(fin$Profit),]
#Replace Missing DATA: derived values
#Revenue - Expenses = Profit
#Expenses = Revenue - Profit
fin[is.na(fin$Profit),] <- fin[is.na(fin$Profit),"Revenue"] - fin[is.na(fin$Profit),"Expenses"]
fin[c(8,42),]
fin[!complete.cases(fin),]
fin <- fin_backup
#Step 2 Find Rows with empty values
fin[!complete.cases(fin),]
#Step 3 Find the NA in industry column with filter
fin[is.na(fin$Industry),]
#step 4 which row is not empty in industry column
fin[!is.na(fin$Industry),]
#step 5 assign it back to fin as a subset
fin <- fin[!is.na(fin$Industry),]
#step 6 check not complete cases
fin[!complete.cases(fin),]
#Resetting the data frame index ------------------------------------------------
fin
rownames(fin) <- 1:nrow(fin)
fin
#Alternative--------
#fin
#rownames(fin) <- NULL
#fin
#Replace missing data: Factual Analysis
fin[!complete.cases(fin),]
fin[is.na(fin$State),]
fin[is.na(fin$State) & fin$City=="New York",]
fin[is.na(fin$State) & fin$City=="New York","State"] <- "NY"
#Check
fin[c(11,377),]
fin[!complete.cases(fin),]
fin[is.na(fin$State),]
fin[is.na(fin$State) & fin$City=="San Francisco",]
fin[is.na(fin$State) & fin$City=="San Francisco","State"] <- "CA"
fin[c(82,265),]
#Replacing with median -------------------------------------------------------
med_empl_retail <- median(fin[fin$Industry == "Retail","Employees"],na.rm = TRUE)
#Check mean
mean(fin[,"Employees"],na.rm = TRUE) #across all industries
mean(fin[fin$Industry == "Retail","Employees"],na.rm = TRUE) # across retail
# Filter creation for future input
fin[is.na(fin$Employees) & fin$Industry == "Retail",]
# add the median info to the missing retail employee number
fin[is.na(fin$Employees) & fin$Industry == "Retail","Employees"] <- med_empl_retail
#check:
fin[3,]
#For missing infor in financal services
med_empl_financial_services <- median(fin[fin$Industry == "Financial Services","Employees"],na.rm = T)
fin[is.na(fin$Employees) & fin$Industry == "Financial Services","Employees"] <- med_empl_financial_services
fin[330,]
fin[!complete.cases(fin),]
#------Growth Column-----------------------------------------------------------
fin[!complete.cases(fin),]
med_growth_constr <- median(fin[fin$Industry=="Construction","Growth"], na.rm=T)
fin[is.na(fin$Growth)& fin$Industry=="Construction","Growth"] <- med_growth_constr
fin[8,]
fin[!complete.cases(fin),]
#------------------Mini Exercise -------------------------------------
#revenue
med_rev_constr <- median(fin[fin$Industry=="Construction","Revenue"],na.rm=T)
fin[is.na(fin$Revenue)&fin$Industry=="Construction",]
fin[is.na(fin$Revenue)&fin$Industry=="Construction","Revenue"] <- med_rev_constr
fin[!complete.cases(fin),]
#Expenses
#Careful dont add the expense to the IT industry
med_exp_constr <- median(fin[fin$Industry=="Construction","Expenses"],na.rm=T)
fin[is.na(fin$Expenses)&fin$Industry=="Construction"& is.na(fin$Profit),]
fin[is.na(fin$Expenses)&fin$Industry=="Construction","Expenses"] <- med_exp_constr
fin[!complete.cases(fin),]
#Replace Missing DATA: derived values
#Revenue - Expenses = Profit
#Expenses = Revenue - Profit
fin[is.na(fin$Profit),"Profit"] <- fin[is.na(fin$Profit),"Revenue"] - fin[is.na(fin$Profit),"Expenses"]
fin[c(8,42),]
fin[!complete.cases(fin),]
fin[is.na(fin$Expenses),"Expenses"] <- fin[is.na(fin$Expenses),"Revenue"] - fin[is.na(fin$Expenses),"Profit"]
fin[c(15,20),]
fin[c(15),]
fin[!complete.cases(fin),]
#Visualisation
library(ggplot2)
#A Scatterplot clasified by industry showing revenue, expense & profit
p <- ggplot(data=fin)
p
p + geom_point(aes(x=Revenue, y=Expenses))
p + geom_point(aes(x=Revenue, y=Expenses,
colour=Industry))
p + geom_point(aes(x=Revenue, y=Expenses,
colour=Industry, size=Profit))
#A Scatterplot that includes industry trends for the expense-revenue relationship
p + geom_point(aes(x=Revenue, y=Expenses,
colour=Industry))
d + geom_point()+
geom_smooth()
#A Scatterplot that includes industry trends for the expense-revenue relationship
d <- ggplot(data=fin,aes(x=Revenue, y=Expenses,
colour=Industry))
d + geom_point()+
geom_smooth()
d + geom_point()+
geom_smooth(fill=NA, size=1.2)
#Boxplots showing growth by Industry
f<- ggplot(data=fin, aes(x=Industry, y=Growth,
colour=Industry))
f + geom_boxplot(size=1)
# Extra
f + geom_jitter() + geom_boxplot(size=1, alpha=0.5, outlier.colour = NA)
getwd(w)
getwd()
util <- read.csv("P3-Machine-Utilization - P3-Machine-Utilization.csv")
head(util, 12)
str(utl)
str(util)
util <- read.csv("P3-Machine-Utilization - P3-Machine-Utilization.csv",stringsAsFactors = T)
head(util, 12)
str(util)
summary(util)
#derive utilisation colum
util$Utilization = 1 - util$Percent.Idle
head(util)
head(util,12)
#Handling Date-Times in R
tail(util)
?POSIXct
as.POSIXct(util$Timestamp, format="%d/%m/%Y %H:%M")
util$PosixTime <- as.POSIXct(util$Timestamp, format="%d/%m/%Y %H:%M")
head(util,12)
summary(util)
#How to re arrange columns in df
util$Timestamp <- NULL
head(util)
head(util,12)
util <- util[,c(4,1,2,3)]
head(util,12)
summary(util)
RL1 <- util[util$Machine=="RL1",]
summary(RL1)
RL1$Machine <- factor(RL1$Machine)
summary(RL1)
util_stats_rl1 <- c(min(RL1$Utilization, na.rm = T),
mean(RL1$Utilization, na.rm = T),
max(RL1$Utilization, na.rm = T))
util_stats_rl1
which(RL1$Utilization < 90)
which(RL1$Utilization < 0.90))
which(RL1$Utilization < 0.90)
lenght(which(RL1$Utilization < 0.90))
lenght(which(RL1$Utilization < 0.90))
len(which(RL1$Utilization < 0.90))
length(which(RL1$Utilization < 0.90))
length(which(RL1$Utilization < 0.90))
RL1$Utilization < 0.90
length(which(RL1$Utilization < 0.90))
util_under_90 <- length(which(RL1$Utilization < 0.90)) > 0
util_under_90
util_under_90_flag <- length(which(RL1$Utilization < 0.90)) > 0
util_under_90_flag
list_rl1 <- list("RL1", util_stats_rl1, util_under_90_flag)
list_rl1
#Naming Components of a list
names(list_rl1)
names(list_rl1) <- c("Machine", "Stats", "LowThreshold")
list_rl1
# Another way
rm(list_rl1)
list_rl1 <- list(Machine="RL1", Stats=util_stats_rl1, LowThreshold=util_under_90_flag)
list_rl1
#Extracting components of a list
# Three ways
#[]-will always return a list
#[[]]- will return the actual object within the componet
#$ - same as [[]] but prettier
list_rl1
list_rl1[1]
list_rl1[[1]]
list_rl1$Machine
list_rl1[2]
typeof(list_rl1[2])
list_rl1[[2]]
typeof(list_rl1[[2]])
list_rl1$Stats
typeof(list_rl1$Stats)
#How would you access the 3rd element of the vector max utilization
list_rl1
#How would you access the 3rd element of the vector max utilization
list_rl1
list_rl1[[2]][3]
list_rl1$Stats[3]
list_rl1[3]
typeof(list_rl1[3])
list_rl1[[3]]
typeof(list_rl1[[3]])
list_rl1$LowThreshold
typeof(list_rl1$LowThreshold)
list_rl1[3]
list_rl1[[3]]
list_rl1$LowThreshold
#Add components into a list & deleting components into a list
list_rl1
list_rl1[4] <- "New Information"
list_rl1
#Another way to add component via $
# we will add vector all hrs utls unkown
RL1
#Another way to add component via $
# we will add vector all hrs utls unkown
RL1[is.na[RL1$Utilization]]
#Another way to add component via $
# we will add vector all hrs utls unkown
RL1[is.na(RL1$Utilization)]
#Another way to add component via $
# we will add vector all hrs utls unkown
RL1[is.na(RL1$Utilization)]
#Another way to add component via $
# we will add vector all hrs utls unkown
RL1[is.na(RL1$Utilization),]
#Another way to add component via $
# we will add vector all hrs utls unkown
RL1[is.na(RL1$Utilization),"PosixTime"]
#Another way to add component via $
# we will add vector all hrs utls unkown
list_rl1$UnknownHours <- RL1[is.na(RL1$Utilization),"PosixTime"]
list_rl1
#Remove component from a list, Use NULL method
list_rl1[4] <- NULL
list_rl1
#!! Notice numerations have shifted
list_rl1[4]
#Add Component
#Data frame for this machine
list_rl1$Data <- RL1
list_rl1
summary(list_rl1)
str(list_rl)
str(list_rl)
str(list_rl1)
#Quick Challenge
list_rl1[[4]][1]
list_rl1$UnknownHours[1]
#Subsetting list
list_rl1
list[1]
list_rl1[1]
list_rl1[1:2]
list_rl1[c(1,4)]
sublist_rl1 <- list_rl1[c("Machine","Stats")]
sublist_rl1
sublist_rl1[[2]][2]
# double [[]] are not for subsetting
list_rl1[[1:3]]
#Building a timeseries polt
#install.packages("ggplot2)
library(ggplot2)
p <- ggplot(data=util)
p + geom_line(aes(x=PosixTime, y=Utilization,
colour=Machine),size=1.2)
p + geom_line(aes(x=PosixTime, y=Utilization,
colour=Machine),size=1.2) +
facet_grid(Machine~.)
p + geom_line(aes(x=PosixTime, y=Utilization,
colour=Machine),size=1.2) +
facet_grid(Machine~.) +
geom_hline(yintercept = 0.90,
colour="Gray", size=1.2)
p + geom_line(aes(x=PosixTime, y=Utilization,
colour=Machine),size=1.2) +
facet_grid(Machine~.) +
geom_hline(yintercept = 0.90,
colour="Gray", size=1.2,
linetype=3)
myplot <- p + geom_line(aes(x=PosixTime, y=Utilization,
colour=Machine),size=1.2) +
facet_grid(Machine~.) +
geom_hline(yintercept = 0.90,
colour="Gray", size=1.2,
linetype=3)
list_rl1$Plot <- myplot
list_rl1
list_rl1
summary(list_rl1)
getwd()
setwd("./Weather Data")
getwd()
#read data
Chicago <- read.csv("Chicago-C.csv", row.names = 1,stringsAsFactors = T)
chi
Chicago
NewYork <- read.csv("NewYork-C.csv", row.names = 1,stringsAsFactors = T)
Huston <- read.csv("Huston-C.csv", row.names = 1,stringsAsFactors = T)
Houston <- read.csv("Houston-C.csv", row.names = 1,stringsAsFactors = T)
SanFrancisco <- read.csv("SanFrancisco-C.csv", row.names = 1,stringsAsFactors = T)
#Check all Cities
Chicago
NewYork
NewYork
Houston
SanFrancisco
#these are dataframe
is.data.frame(Chicago)
#convert to matrices
Chicago <- as.matrix(Chicago)
Chicago <- as.matrix(Chicago)
NewYork <- as.matrix(NewYork)
Houston <- as.matrix(Houston)
SanFrancisco <- as.matrix(SanFrancisco)
#Check
is.matrix(Chicago)
#List
Weather <- list(Chicago, NewYork, Houston, SanFrancisco)
Weather
#List
Weather <- list(Chicago=Chicago,NewYork=NewYork, Houston=Houston, SanFrancisco=SanFrancisco)
Weather
#lets try out
Weather[3]
Weather[[3]]
Weather$Houston
# Using Apply
?apply
Chicago
apply(Chicago, 1, mean)
#check
mean(Chicago["DaysWithPrecip",])
#analyze one city
Chicago
apply(Chicago, 1, max)
apply(Chicago, 1, min)
#for practice
apapply(Chicago, 2, max)
#for practice
apply(Chicago, 2, max)
apply(Chicago, 2, min)
apply(Chicago, 1, mean)
apply(NewYork, 1, mean)
apply(Houston, 1, mean)
apply(SanFrancisco, 1, mean)
#Deliverable 1 but there is a faster way
#Recreate apply Function With LOOPS.
Chicago
for(i in 1:5){ #run cycle of the loop
output[i] <- mean(Chicago[i,])
}
output <- Null #preparing empty vector
#find mean of every row
#1. loops
output <- NULL #preparing empty vector
for(i in 1:5){ #run cycle of the loop
output[i] <- mean(Chicago[i,])
}
output
names(output) <- rownames(Chicago)
output
#2. via apply function
apply(Chicago, 1, mean)
#Using lapply()
?lapply
Chicago
t(Chicago)
lapply(Weather, t) # t(weather$chicago), t(weather$NewYork)...t(SanFrancisco)
mynewlist <- lapply(Weather, t)
mynewlist
#example 2
Chicago
rbind(Chicago, NewRow=1:12)
lapply(Weather, rbind, NewRow=1:12)
#example 3
?rowMeans
rowMeans(Chicago)#identical to:apply(Chicago, 1,mean)
lapply(Weather, rowMeans)
#combing lapply with the [] operator.
Weather
Weather$Chicago[1,1]
Weather[[1]][1]
Weather[[1]][1,1]
lapply(Weather, "[",1,1)
Weather
lapply(Weather,"[",1, )
Weather
lapply(Weather,"[", ,3)
#ADDING YOUR OWN FUNCTION
lapply(Weather, rowMeans)
#ADDING YOUR OWN FUNCTION
lapply(Weather, rowMeans)
lapply(Weather, function(x) x[1,] )
lapply(Weather, function(x) x[5,] )
lapply(Weather, function(x) x[,12] )
lapply(Weather, function(z) z[1,] - z[2,] )
Weather
lapply(Weather, function(z) z[1,] - z[2,] )
lapply(Weather, function(z) (z[1,] - z[2,])/z[2,] )
lapply(Weather, function(z) round((z[1,] - z[2,])/z[2,],2))
# this is the deliverable to temperature flux will improve
#using sapply
?sapply
Weather
#Average high temp July
lapply(Weather, "[", 1,7)
sapply(Weather, "[", 1,7)
#Average High Temp last quarter
lapply(Weather,"[", 1,10:12)
sapply(Weather,"[", 1,10:12)
#Another example
lapply(Weather, rowMeans)
sapply(Weather, rowMeans)
round(sapply(Weather, rowMeans),2)
#another example
lapply(Weather, function(z) round((z[1,] - z[2,])/z[2,],2))
#another example
sapply(Weather, function(z) round((z[1,] - z[2,])/z[2,],2))
#By the way
sapply(Weather, rowMeans, simplify = F)
#Nesting Apply Functions
Weather
lapply(Weather, rowMeans)
Chicago
apply(Chicago,1,max)
#apply across whole list
lapply(Weather, apply, 1, max)
lapply(Weather, function(x) apply(x,1,max))
#tidy
sapply((Weather, apply, 1, max)
#tidy
sapply(Weather, apply, 1, max)
sapply(Weather, apply, 1, min)
#which.max
?which.max
Chicago
which.max(Chicago[1,])
names(which.max(Chicago[1,]))
#With APPLY
apply(Chicago,1,function(x)names(which.max(x)))
lapply(Weather,function(y)apply(y,1,function(x)names(which.max(x))))
sapply(Weather,function(y)apply(y,1,function(x)names(which.max(x))))
sapply(Weather,function(y)apply(y,1,function(x)names(which.min(x))))
